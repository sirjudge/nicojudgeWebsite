# Optimized Dockerfile for Dioxus Fullstack Web Application
# This Dockerfile creates a much smaller production image by:
# 1. Using multi-stage builds properly
# 2. Only copying necessary runtime files to the final stage
# 3. Using a minimal base image for the runtime
# 4. Removing build tools and intermediate files

# ============================================================================
# BUILDER STAGE - Full Rust environment for building
# ============================================================================
FROM rust:1.81 AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

# Install dioxus CLI
RUN cargo install dioxus-cli --version 0.6.3 --locked

# Install SQLx CLI for database migrations
RUN cargo install sqlx-cli --no-default-features --features sqlite --locked

# Add wasm32 target for client-side builds
RUN rustup target add wasm32-unknown-unknown

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY source/Cargo.toml source/Cargo.lock ./
COPY source/Dioxus.toml ./
COPY source/rust-toolchain.toml ./

# Build dependencies first (this layer will be cached)
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release --features server
RUN rm -rf src

# Copy source code and assets
COPY source/src/ ./src/
COPY source/assets/ ./assets/
COPY source/migrations/ ./migrations/
COPY source/tailwind.css ./
COPY source/tailwind.config.js ./
COPY source/main.db ./

# Mount secrets for build
RUN --mount=type=secret,id=github_token \
    --mount=type=secret,id=database_url \
    export GITHUB_TOKEN=$(cat /run/secrets/github_token) && \
    export DATABASE_URL=$(cat /run/secrets/database_url) && \
    cargo build --release --features server

# Build the fullstack application with dioxus
RUN dx build --release --platform web --features web --no-default-features

# ============================================================================
# RUNTIME STAGE - Minimal Debian image for production
# ============================================================================
FROM debian:bookworm-slim

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libsqlite3-0 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user
RUN useradd -m -u 1001 app

# Set working directory
WORKDIR /app

# Copy only the necessary files from builder
COPY --from=builder /app/target/release/web ./server
COPY --from=builder /app/main.db ./
COPY --from=builder /app/migrations/ ./migrations/

# Copy static assets if they exist
COPY --from=builder /app/assets/ ./assets/
COPY --from=builder /app/target/dx/web/release/web/public/ ./public/

# Change ownership to app user
RUN chown -R app:app /app

# Switch to app user
USER app

# Set environment variables
ENV PORT=8080
ENV IP=0.0.0.0
ENV RUST_LOG=info

# Expose port
EXPOSE 8080

# Run the server binary directly
CMD ["./server"] 