# ============================================================================
# BUILDER STAGE - Full Rust environment for building
# ============================================================================
FROM rust:1.81 AS builder


# Initialize and set the github and database environment variables
ARG GITHUB_TOKEN
ARG DATABASE_URL
ENV GITHUB_TOKEN=${GITHUB_TOKEN}
ENV DATABASE_URL=${DATABASE_URL}

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

# Install dioxus CLI
RUN cargo install dioxus-cli --version 0.6.3 --locked

# Install SQLx CLI for database migrations
RUN cargo install sqlx-cli --no-default-features --features sqlite --locked

# Add wasm32 target for client-side builds
RUN rustup target add wasm32-unknown-unknown

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY source/Cargo.toml source/Cargo.lock ./
COPY source/Dioxus.toml ./
COPY source/rust-toolchain.toml ./

# note: this is an artifact from a previous iteration of the Dockerfile, just noticed we're doing this multiple times
# It's causing too much slowdown
# Build dependencies first (this layer will be cached)
# RUN mkdir src && echo "fn main() {}" > src/main.rs
# RUN cargo build --release --features server
# RUN rm -rf src

# Copy source code and assets
COPY source/src/ ./src/
COPY source/assets/ ./assets/
COPY source/migrations/ ./migrations/
COPY source/tailwind.css ./
COPY source/tailwind.config.js ./
COPY source/main.db ./

# Build the fullstack application with proper environment variables
RUN cargo build --release --features server

# Note: I don't think we need this anymore now that I fixed the importing of
# Environment variables
# Prepare SQLx queries with DATABASE_URL available
# RUN cargo sqlx prepare

# Build the frontend with dioxus
# Note: the `DATABASE_URL` environment variable is used in this stage
# when validating the sqlx dependencies as it checks and verifies the sqlite
# file has the correct tables and such
RUN dx build --release --platform web --features web --no-default-features

# ============================================================================
# RUNTIME STAGE - Minimal Debian image for production
# ============================================================================
FROM debian:bookworm-slim

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libsqlite3-0 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user
RUN useradd -m -u 1001 app

# Set working directory
WORKDIR /app

# Copy only the necessary files from builder
COPY --from=builder /app/target/release/web ./server
COPY --from=builder /app/main.db ./
COPY --from=builder /app/migrations/ ./migrations/

# Copy static assets if they exist
COPY --from=builder /app/assets/ ./assets/
COPY --from=builder /app/target/dx/web/release/web/public/ ./public/

# Change ownership to app user
RUN chown -R app:app /app

# Switch to app user
USER app

# Set environment variables
# Dioxus variables
ENV PORT=8080
ENV IP=0.0.0.0

# Rust/app runtime variables
ENV RUST_LOG=info

# Expose port
EXPOSE 8080

# Run the server binary directly instead of `dx serve`
CMD ["./server"]
